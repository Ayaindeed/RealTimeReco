name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
    
    - name: Run code formatting check
      run: |
        black --check src/ --diff
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "from src.recommendation_engine.collaborative_filtering import CollaborativeFilteringEngine; print('✅ Collaborative filtering import successful')"
        python -c "from src.data_collection.enhanced_event_producer import EnhancedStreamingEventProducer; print('✅ Event producer import successful')"
        python -c "from src.user_storage.hbase_manager import HBaseManager; print('✅ HBase manager import successful')"
    
    - name: Run unit tests (if any)
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker images
      run: |
        echo "Building recommendation service Docker image..."
        docker build -f dockerfile -t realtime-rec:latest .
        
        echo "Testing Docker build..."
        docker images realtime-rec:latest
    
    - name: Test Docker compose validation
      run: |
        docker-compose -f docker-compose.yaml config

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
